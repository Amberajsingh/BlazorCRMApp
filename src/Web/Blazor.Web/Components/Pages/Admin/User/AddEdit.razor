@using System.ComponentModel.DataAnnotations
@inject IUserService userService

<Modal Title="@($"{(IsEdit ? "Edit" :"Add")} User")" IsOpen="@IsModalOpen" IsOpenChanged="HandleModalToggle">
    <BodyContent>
        <EditForm Model="Input" method="post" OnValidSubmit="SubmitUser" FormName="User">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="email" class="form-label">First Name</label>
                        <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="First Name" />
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="email" class="form-label">Last Name</label>
                        <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Last Name" />
                        <ValidationMessage For="() => Input.LastName" class="text-danger" />
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="email" class="form-label">Email</label>
                        <InputDate @bind-Value="Input.Dob" class="form-control" placeholder="DOB" />
                        <ValidationMessage For="() => Input.Dob" class="text-danger" />
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="country" class="form-label">Designation</label>
                        <InputSelect @bind-Value="Input.DesignationId" class="form-control">
                            <option value="">Please select</option>
                            @foreach (var designation in designations)
                            {
                                <option value="@designation.Value">@designation.Text</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Input.DesignationId" class="text-danger" />
                    </div>
                </div>

            </div>

            <div class="modal-footer text-right">
                <button type="submit" class="btn btn-primary">Submit</button>
                <button type="button" class="btn btn-default" @onclick="Cancel">Cancel </button>
            </div>
        </EditForm>
    </BodyContent>
</Modal>

@code{
    [Inject] IMasterService masterService { get; set; }

    [Parameter]
    public EventCallback<bool> SaveChanged { get; set; }

    [SupplyParameterFromForm]
    private UpdateUserDto Input { get; set; } = new();

    private bool IsEdit { get; set; } = false;
    public bool IsModalOpen { get; set; }

    private List<SelectListDto> designations = new();
    protected override async Task OnInitializedAsync()
    {
        designations = (await masterService.GetDesignationDropdown()).Data;
    }

    private async Task HandleModalToggle(bool isOpen)
    {
        IsModalOpen = isOpen;
        await SaveChanged.InvokeAsync();
        //return Task.CompletedTask;
    }

    private void HandleConfirm()
    {
        IsModalOpen = false;
    }
    private async Task Cancel()
    {
        IsModalOpen = false;
        await SaveChanged.InvokeAsync(false);
    }

    public void AddUser()
    {
        IsModalOpen = true;
        IsEdit = false;
        Input = new();
    }

    public void EditUser(UpdateUserDto model)
    {
        IsModalOpen = true;
        IsEdit = true;
        Input = new()
        {
            Id = model.Id,
            FirstName = model.FirstName,
            LastName = model.LastName,
            Dob = model.Dob,
            DesignationId = model.DesignationId,
            UserLoginId = model.UserLoginId
        };
    }

    public async Task SubmitUser()
    {
        var result = await userService.UpdateUser(Input);
        if (result != null && result.IsSuccess)
        {
            IsModalOpen = false;
            await SaveChanged.InvokeAsync(result.Data);
        }
    }
}